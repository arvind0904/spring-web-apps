MVC:
---
	Web Application [https or http://www.domain.com]


	Registration or Sign Up
	

		
	JSON: JavaScript Object Notation

		[{
		  "email":"alex@gmail.com",
		  "password":"12345"
		},
		{
		  "email":"bob@gmail.com",
		  "password":"12345"
		},
		{
		  "email":"clare@gmail.com",
		  "password":"12345"
		}]

	FSD

		Restful Webservices or Rest API
		Micro Services


		Tools :
			Java Installations

			Eclipse IDE
			MySQL DataBase

			STS4.0 

		To create a new Project in Eclipse:
		File  ---> New ---> Project ---> sample-web-app


		1. Understanding Dependency Injection:
			
						DI is a design pattern to remove the dependency from the application so that it can be managed and
						tested the application easily.
		To achieve DI through:
		--> By Constructor
				We Inject the dependency by constructor.
					<constructor-arg>  <bean>
					
		--> By Setter method


			Task:
			=====

				Achieve a DI By constructor for Person class.
				id,name,email,phone,city,state,country


		 2. Wiring Beans:
			Spring - Autowiring: The Spring framework can inject dependencies automatically.
			Spring Container detects those dependencies specified in configuration file and 
				@ the relationship between the beans.

			=> Modes of Autowiring:
			  ---------------------
					1. No : this mode tells the framework that autowiring is not supposed to be done.
						 Its the default mode used by spring.

					2. byName: It uses the name of the bean for injecting dependencies.

					3. byType: It injects the dependency according to the type of the bean.

					4. constructor: It injects the required dependencies by invoking the constructor.

					5. autodetect: @Autowired

		Uploading code into git:
		We will create a new Repository: spring-web-apps

		1. github account
		2. gitbash or git configured in windows


		step1: create a new folder(my-repo) and execute git init
		step2: git pull https://github.com/arvind0904/spring-web-apps.git
		step3: copy the code into the my-repo directory
		step4: git status
		step5: git add .
		step6: git status
		step7: git commit -m "DI by constructor"
		step8: git push --set-upstream https://github.com/arvind0904/spring-web-apps.git master
	
		3. Aspect Oriented Programming:
		--------------------------------
		 	Spring AOP:

				class Demo{
				
					addition(){
					}

					substraction(){
					}

					mul(){
					}

					division(){		
					}	

				}

			Solution: entry in xml file

				-> Advice:
					Before Advice
					After returning Advice
					After Advice
					Around Advice
				-> Join point
				-> Pointcut
				-> Aspect


			AOP Implementations are provided by:
			1. AspectJ
			2. Spring AOP
				-> dtd based
				-> By AspectJ annotation-style
					@Aspect   @Pointcut 
					Pointcut:
				-> XML configuration style(schema based)

				it does this by adding additional behavior to existing code (an advice) without modifying the code itself.
			3. JBoss AOP


		AOP: Aspect Oriented Programming.
			AOP breaks the program logic into distinct parts called concerns.

			Its used to increase the modulartity by cross-cutting concrens.

			
		cross-cutting concern : Its a concern that can effect the whole application and should be centralized in one location in code.
			Transaction Management,Session Managemnet,Logging,Security etc ...

		It provides the pluggable way to dynamically add the additional concern before, after or around the actual logic.



			Class Task{
				
				scanning(){
				}

				printing(){
				}

				reading(){
				}

				saving(){
				}

				validating(){	

				}
				
			}
		

			Lets Assume: If i want to maintain log and send notification to scanning (),printing()...

			without AOP: I have to write a code that sends notification to scanning and printing...
			Problem is : to change the code which may leads to a maintainance problem in future...

			Solution with AOP: we dont have to call methods  instead we define additional concern maintaining logs,notifcation etc...
						Its entry is specified in xml file.
			




			Before-aspect[some othr functnailty]
			Actual Logic to Perform [some Operation or any business logic]<- I dont want to modify or change the code
			

			Actual Logic
			After

			Before
			Actual Logic
			After


-------------------------------------------------------------------------------------------------------------------------------

7:30 PM TO 11:30 PM

7:30 PM TO 9:00PM SESSION1
9:00 PM TO 9:30 PM BREAK
9:30 PM TO 10:30 PM SESSION2
10:30PM TO 11:30 PM EXECUTIONS OR LAB

================================================================================================================================

Transaction Management:
======================

		Transaction is a sequence of actions performed by the application that togeather pipelined to perform a single operation.	

		Example: Booking a flight ticket is considered as a Transaction where end user has to enter information and make payment
					to book a ticket.	

			
		passenger table:

			Spring : 
			1. Spring is an open source lightweight framework.
				Enterprise web Apps
			2. Important feature of Spring is DI.
			3. We need to set server explicitly to run the application
			4. we need to write a lot of code
			5. No support for In memory database
			6. developers have to define dependencies manually in pom.xml 

			SpringBoot: STS 4.0
			1. Built on top of spring framework,Rest APIs
			2. Important feature of SpringBoot is Autoconfiguration
			3. embedded servers
			4. It reduces lines of code 
			5. Support for in-memory database: example H2
			6. pom.xml internally handles the required dependencies.

	spring.datasource.url=jdbc:mysql://localhost:3306/transactions_db
	spring.datasource.username=root
	spring.datasource.password=admin



			





































			
